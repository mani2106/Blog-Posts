# Advanced GitHub Pages + Tweet Generator Workflow
# Includes auto-posting, custom configuration, and comprehensive monitoring

name: Advanced Blog Workflow with Tweet Generation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 9 AM UTC to catch any missed posts
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all tweet threads'
        required: false
        default: 'false'
        type: boolean
      dry_run:
        description: 'Run in dry-run mode (no posting)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  issues: write  # For error reporting

concurrency:
  group: "blog-workflow-${{ github.ref }}"
  cancel-in-progress: false

env:
  # Global configuration
  RUBY_VERSION: '3.1'
  NODE_VERSION: '18'
  JEKYLL_ENV: production

jobs:
  # Pre-flight checks
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      posts_changed: ${{ steps.check.outputs.posts_changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check
        run: |
          # Check if we should build
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.force_regenerate }}" == "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "posts_changed=true" >> $GITHUB_OUTPUT
          elif git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E "^(_posts|_notebooks)/" > /dev/null; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "posts_changed=true" >> $GITHUB_OUTPUT
          elif git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E "\.(md|html|yml|yaml|js|css|scss)$" > /dev/null; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "posts_changed=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "posts_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate configuration
        if: steps.check.outputs.should_build == 'true'
        run: |
          # Check required files exist
          if [ ! -f "_config.yml" ]; then
            echo "❌ _config.yml not found"
            exit 1
          fi

          if [ ! -f "Gemfile" ]; then
            echo "❌ Gemfile not found"
            exit 1
          fi

          # Validate tweet generator config if it exists
          if [ -f ".github/tweet-generator-config.yml" ]; then
            echo "✅ Found tweet generator configuration"
            # Add YAML validation here if needed
          fi

          echo "✅ Configuration validation passed"

  # Build Jekyll site
  build:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Setup Node.js (for asset processing)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          fi

      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Build Jekyll site
        run: |
          echo "🏗️ Building Jekyll site..."
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --verbose

          # Validate build output
          if [ ! -d "_site" ]; then
            echo "❌ Build failed: _site directory not created"
            exit 1
          fi

          echo "✅ Jekyll build completed successfully"

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: jekyll-site
          path: _site/
          retention-days: 1

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2

  # Generate tweet threads
  generate-tweets:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.posts_changed == 'true'

    outputs:
      threads_generated: ${{ steps.generate.outputs.threads_generated }}
      posts_processed: ${{ steps.generate.outputs.posts_processed }}
      pr_created: ${{ steps.generate.outputs.pr_created }}
      errors_count: ${{ steps.generate.outputs.errors_count }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate tweet threads
        id: generate
        uses: ./.github/actions/tweet-generator
        with:
          # Required API keys
          openrouter_api_key: ${{ secrets.OPENROUTER_API_KEY }}

          # Twitter API credentials (optional, for auto-posting)
          twitter_api_key: ${{ secrets.TWITTER_API_KEY }}
          twitter_api_secret: ${{ secrets.TWITTER_API_SECRET }}
          twitter_access_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          twitter_access_token_secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}

          # Configuration
          config_file: '.github/tweet-generator-config.yml'
          dry_run_mode: ${{ github.event.inputs.dry_run || 'false' }}
          force_regenerate: ${{ github.event.inputs.force_regenerate || 'false' }}

          # Advanced options
          max_tweets_per_thread: '10'
          engagement_level: 'high'
          auto_post_enabled: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}

      - name: Report generation results
        run: |
          echo "📊 Tweet Generation Results:"
          echo "  • Threads generated: ${{ steps.generate.outputs.threads_generated }}"
          echo "  • Posts processed: ${{ steps.generate.outputs.posts_processed }}"
          echo "  • Errors: ${{ steps.generate.outputs.errors_count }}"

          if [ "${{ steps.generate.outputs.pr_created }}" != "" ]; then
            echo "  • PR created: ${{ steps.generate.outputs.pr_created }}"
          fi

      - name: Upload generated files
        uses: actions/upload-artifact@v3
        with:
          name: generated-tweets
          path: |
            .generated/
            .posted/
          retention-days: 30

  # Deploy to GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/main' && needs.validate.outputs.should_build == 'true'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Report deployment
        run: |
          echo "🚀 Deployment completed!"
          echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"

  # Post-deployment tasks
  post-deploy:
    runs-on: ubuntu-latest
    needs: [deploy, generate-tweets]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create deployment summary
        run: |
          echo "# 🎉 Blog Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Site deployed**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Posts processed**: ${{ needs.generate-tweets.outputs.posts_processed || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Threads generated**: ${{ needs.generate-tweets.outputs.threads_generated || '0' }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.generate-tweets.outputs.pr_created }}" != "" ]; then
            echo "- **Review PR**: [${{ needs.generate-tweets.outputs.pr_created }}](${{ needs.generate-tweets.outputs.pr_created }})" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.generate-tweets.outputs.errors_count }}" != "0" ]; then
            echo "- **Errors**: ⚠️ ${{ needs.generate-tweets.outputs.errors_count }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on errors
        if: needs.generate-tweets.outputs.errors_count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Tweet Generation Errors - ${new Date().toISOString().split('T')[0]}`,
              body: `
              ## Tweet Generation Errors

              **Workflow Run**: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              **Errors Count**: ${{ needs.generate-tweets.outputs.errors_count }}
              **Posts Processed**: ${{ needs.generate-tweets.outputs.posts_processed }}

              Please check the workflow logs for detailed error information.

              ### Next Steps
              1. Review the workflow logs
              2. Check API key validity
              3. Verify blog post frontmatter format
              4. Re-run the workflow if needed
              `,
              labels: ['bug', 'tweet-generator', 'automated']
            });

  # Cleanup old artifacts and data
  cleanup:
    runs-on: ubuntu-latest
    needs: [post-deploy]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cleanup old generated files
        run: |
          # Remove generated files older than 30 days
          find .generated -name "*.json" -mtime +30 -delete 2>/dev/null || true
          find .posted -name "*.json" -mtime +90 -delete 2>/dev/null || true

          # Commit cleanup if files were removed
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🧹 Cleanup old generated files [skip ci]"
            git push
          fi

      - name: Archive old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            // Keep only the last 50 workflow runs
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'advanced-workflow.yml',
              per_page: 100
            });

            const runsToDelete = runs.data.workflow_runs.slice(50);

            for (const run of runsToDelete) {
              if (run.status === 'completed') {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  console.log(`Deleted workflow run ${run.id}`);
                } catch (error) {
                  console.log(`Failed to delete run ${run.id}: ${error.message}`);
                }
              }
            }

# Workflow-level error handling
on_failure:
  runs-on: ubuntu-latest
  needs: [validate, build, generate-tweets, deploy]
  if: failure()

  steps:
    - name: Report failure
      uses: actions/github-script@v7
      with:
        script: |
          const failedJobs = [
            ${{ needs.validate.result == 'failure' && '"validate"' || 'null' }},
            ${{ needs.build.result == 'failure' && '"build"' || 'null' }},
            ${{ needs.generate-tweets.result == 'failure' && '"generate-tweets"' || 'null' }},
            ${{ needs.deploy.result == 'failure' && '"deploy"' || 'null' }}
          ].filter(job => job !== null);

          if (failedJobs.length > 0) {
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Workflow Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `
              ## Workflow Failure Report

              **Failed Jobs**: ${failedJobs.join(', ')}
              **Workflow Run**: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              **Commit**: ${context.sha}
              **Branch**: ${context.ref}

              Please investigate the failure and take appropriate action.
              `,
              labels: ['bug', 'workflow-failure', 'automated']
            });
          }